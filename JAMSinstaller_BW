#!/usr/bin/env Rscript
if ((.Platform$OS.type) != "unix"){
    cat("JAMS was written for UNIX systems. It looks like you may be on Windows. Will try installing JAMSbeta. For JAMSalpha, use a Unix system.")
    OnUnix <- FALSE


     # Check if RTools is installed
    has_rtools <- FALSE
    tryCatch({
        has_rtools <- devtools::find_rtools()
    }, error = function(e) {
        has_rtools <- FALSE
    })
    
    if (!has_rtools) {
        cat("RTools is not installed or not found. It's required for installing packages from source on Windows.\n")
        cat("Attempting to install/configure RTools...\n")
        
        # Get R version to determine which RTools version to install
        r_ver <- as.numeric(R.version$major) + as.numeric(R.version$minor)/10
        
        # Function to dynamically fetch the latest RTools URL
        get_latest_rtools_url <- function() {
            # Fetch the RTools download page
            cran_rtools_page <- "https://cran.r-project.org/bin/windows/Rtools/"
            page_content <- tryCatch({
                readLines(cran_rtools_page, warn = FALSE)
            }, error = function(e) {
                cat("Error fetching RTools page. Falling back to hardcoded URLs.\n")
                return(NULL)
            })
            
            if (is.null(page_content)) {
                return(NULL)
            }
            
            # Extract links to .exe files
            rtools_links <- grep("rtools[0-9]+.*\\.exe", page_content, value = TRUE)
            rtools_links <- regmatches(rtools_links, gregexpr("rtools[0-9]+.*?\\.exe", rtools_links))
            rtools_links <- unique(unlist(rtools_links))
            
            if (length(rtools_links) == 0) {
                cat("Could not extract RTools download links. Using fallback URLs.\n")
                return(NULL)
            }
            
            # Construct full URLs
            latest_rtools <- paste0(cran_rtools_page, "files/", rtools_links[length(rtools_links)])
            return(latest_rtools)
        }

        # Determine RTools URL dynamically or use fallback
        rtools_url <- get_latest_rtools_url()
        if (is.null(rtools_url)) {
            if (r_ver >= 4.3) {
                rtools_url <- "https://cran.r-project.org/bin/windows/Rtools/rtools43/files/rtools43-5550-5548.exe"
            } else if (r_ver >= 4.0) {
                rtools_url <- "https://cran.r-project.org/bin/windows/Rtools/rtools40-x86_64.exe"
            } else {
                stop("Your R version is too old. Please upgrade to R 4.0 or newer.")
            }
        }

        rtools_installer <- file.path(tempdir(), basename(rtools_url))

        cat("Downloading RTools installer from:", rtools_url, "\n")
        download.file(rtools_url, rtools_installer, mode = "wb")
        
        cat("Installing RTools. Please follow the installation prompts.\n")
        cat("IMPORTANT: Make sure to check the option to 'Add rtools to system PATH'.\n")
        system(rtools_installer)
        
        # Check if installation was successful
        Sys.sleep(5)  # Wait for installer to finish
        has_rtools <- tryCatch({
            devtools::find_rtools()
        }, error = function(e) {
            FALSE
        })
        
        if (has_rtools) {
            cat("RTools installation successful!\n")
        } else {
            cat("RTools installation may not have completed successfully.\n")
            cat("You may need to install RTools manually from https://cran.r-project.org/bin/windows/Rtools/\n")
            cat("Continuing with installation, but some packages might fail to compile...\n")
        }
    } else {
        cat("RTools is already installed. Proceeding with installation.\n")
    }

    # Check if Windows user has writable library access
    rlibs <- .libPaths()[1]
    dir_test <- file.path(rlibs, ".write_test")
    can_write <- tryCatch({
        dir.create(dir_test, showWarnings = FALSE)
        if (file.exists(dir_test)) {
            unlink(dir_test, recursive = TRUE)
            TRUE
        } else {
            FALSE
        }
    }, error = function(e) {
        return(FALSE)
    })

    # If can't write to main library, create a user library
    if (!can_write) {
        cat("Main R library at", rlibs, "is not writable.\n")
        user_lib <- file.path(Sys.getenv("USERPROFILE"), "R", "win-library", R.version$major, ".", as.character(getRversion()))
        if (!dir.exists(user_lib)) {
            dir.create(user_lib, recursive = TRUE, showWarnings = FALSE)
            cat("Created personal R library at:", user_lib, "\n")
        } else {
            cat("Using existing personal R library at:", user_lib, "\n")
        }
        .libPaths(c(user_lib, .libPaths()))
        rlibs <- user_lib
        cat("set R library location to:", rlibs, "\n")
    }
} else {
    OnUnix <- TRUE
}

print_help <- function(){
   cat("JAMSinstaller - a script for installing the JAMS package safely on your system.\n")
   cat("Please read instructions on this page before attempting to install:\nhttps://github.com/johnmcculloch/JAMS_BW/wiki/Installing_JAMS_on_Biowulf\n")
   cat("\n")
   cat("Usage: JAMSinstaller --install [options]\n")
   cat("\n")
   cat("Options:\n")
   #cat("--onlybeta    #Installs only JAMSbeta. Useful to install on a computer where only JAMSbeta will be run.\n")
   cat("--linkto   #Creates symbolic links to the JAMS excecutables to this path. Default: ~/bin\n")
   cat("\n")
   #cat("If only --install is passed, both JAMSalpha and JAMSbeta will be installed,\nand symlinks to the excecutables will be created in the user\'s ~/bin folder,\nwhich is assumed to be in $PATH\n")
   #cat("\n")
   q()
}

# get path of running script
getScriptPath <- function() {
    cmdArgs <- commandArgs(trailingOnly = FALSE)
    needle <- "--file="
    match <- grep(needle, cmdArgs)
    if (length(match) > 0) {
        return(dirname(normalizePath(sub(needle, "", cmdArgs[match]))))
    } else {
        return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
    }
}

#Allow for some very simple options with base package fucntions, as we still do not know what the user has installed.
args <- commandArgs(trailingOnly = TRUE)

if (length(args) > 0){
    if(!all((as.character(args) %in% c("--install", "--onlybeta",  "--linkto", "--force")))){
        print_help()
    }
} else {
    print_help()
}

#Decide what to install and where
#if (("--onlybeta") %in% (as.character(args))){
#    installalpha <- FALSE
#    binexecs <- c("JAMSbeta", "JAMS16", "JAMSjoinlanes", "JAMSmakeswarm", "JAMSbankit", "JAMSfastqprefixrenamer")
#} else {
    installalpha <- TRUE
    binexecs <- c("JAMSalpha", "JAMSbeta", "JAMS16", "JAMSbuildk2db", "JAMSjoinlanes", "JAMSmakeswarm", "JAMSbankit", "JAMSfastqprefixrenamer")
#}

homefolder <- as.character(Sys.getenv("HOME"))
if ("--linkto" %in% (as.character(args))){
    linkto <- args[(which(args) == "--linkto") + 1]
} else {
    linkto <- file.path(homefolder, "bin")
}

if (!file.exists(linkto)){
    stop(paste("The specified folder for creating executable symbolic links does not exist:", linkto))
}


if ("--force" %in% (as.character(args))){
    force_install <- TRUE
} else {
    force_install <- FALSE
}

jamsdir <- getScriptPath()

#Make sure we are writing to the right place
rlibs <- as.character(Sys.getenv("R_LIBS"))
if(nchar(rlibs) == 0){
    rlibs <- .libPaths()[1]
}

#Decide which kind of system you are on.
currslurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))
if (nchar(currslurmjobid) > 3){
    onbiowulf <- TRUE
    #Define appropriate functions for slurm system
    detectBatchCPUs <- function() {
        slurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))
        sacctraw <- system2("sacct", args = c("-j", slurmjobid, "-X", "-P"), stdout = TRUE)
        jobinforaw <- sacctraw[2]
        jobinfoheaders <- sacctraw[1]
        #jobinfo <- unlist(strsplit(jobinforaw, split=" "))[which(unlist(strsplit(jobinforaw, split=" ")) != "")]
        jobinfo <- unlist(strsplit(jobinforaw, split="\\|"))
        #names(jobinfo) <- unlist(strsplit(jobinfoheaders, split=" "))[which(unlist(strsplit(jobinfoheaders, split=" ")) != "")]
        names(jobinfo) <- unlist(strsplit(jobinfoheaders, split="\\|"))
        ncores <- as.integer(jobinfo["AllocCPUS"])
        print(jobinfo)
        if (is.na(ncores)) {
            #Try plan B
            ncores <- as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK"))
            if (is.na(ncores)) {
                stop("Could not determine how many CPUs you have. Aborting.")
            }
        }
        return(ncores)
    }

    detectAvailRAM <- function(){
        mempercpu <- as.integer(Sys.getenv("SLURM_MEM_PER_CPU"))
        mempernode <- as.integer(Sys.getenv("SLURM_MEM_PER_NODE"))
        cpuspertask <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK"))

        if(!(is.na(mempernode))){
            totmem <- mempernode
        } else {
            totmem <- mempercpu * cpuspertask
        }

        totmembytes<-totmem * 1000000

        return(totmembytes)
    }

} else {
    onbiowulf <- FALSE
    detectBatchCPUs <- function() {
         ncores <- detectCores()
         if (is.na(ncores)) {
             stop("Could not determine how many CPUs you have. Aborting.")
         }
         return(ncores)
     }

     detectAvailRAM <- function(){
         totmembytes<-as.numeric(get_ram())

         return(totmembytes)
     }

    #if (installalpha == TRUE){
    #    stop("You are not on a node on Biowulf. This version of JAMSalpha will only work on HPC Biowulf. Refer to documentation. Aborting now. If you want to install only JAMSbeta, use the --onlybeta option.")
    #}

    if (nchar(rlibs) < 5){
        rlibs <- .libPaths()[1]
    }
}

cat(paste("JAMS R libraries will be installed to", rlibs, "\n"))
#if (onbiowulf == TRUE){
#    system("export TMP=/data/$USER")
#} else {
#    system("export TMP=~/")
#}

#Install devtools and stringr if not present
repos <- "https://cloud.r-project.org"

##### TEMPORARY FIX FOR BENCHMARKME #####

if(!("devtools" %in% rownames(installed.packages()))) {
    install.packages("devtools", repos = repos, update = TRUE, lib = rlibs)
}
require("devtools")

# Safely check and remove benchmarkme if it exists
tryCatch({
    if("benchmarkme" %in% rownames(installed.packages())) {
        remove.packages("benchmarkme", lib = rlibs)
    }
}, error = function(e) {
    cat("Note: benchmarkme was not found or could not be removed. Will install fresh copy.\n")
})

# Install your local version of benchmarkme
cat("Installing custom benchmarkme package...\n")
devtools::install_github("tmossington/benchmarkme@fix-win-ram-reporting", lib = rlibs)

if ("benchmarkme" %in% rownames(installed.packages())) {
    require("benchmarkme")
} else {
    stop("Failed to install benchmarkme package. Aborting installation.")
}

if(!(all((c("devtools", "stringr", "parallel", "BiocManager", "prettyunits") %in% rownames(installed.packages()))))){
    install.packages(c("devtools", "stringr", "parallel", "BiocManager", "prettyunits"), repos = repos, update = TRUE, lib = rlibs)
}
#Make sure we have the correct version of Bioconductor
BiocManager::install(version = "3.19", ask = FALSE)

require("devtools")
require("stringr")
require("parallel")
require("BiocManager")

threads <- detectBatchCPUs()
cat(paste("You have", threads, "cpus available\n"))
bytesRAM <- detectAvailRAM()
cat(paste0("You have ~", round(bytesRAM/1E9, 1), " Gbytes of RAM available\n"))

#Install all packages via Bioconductor
alldeps <- c("R.utils", "Rcpp", "RcppEigen", "parallel", "optparse", "tcltk", "futile.logger", "benchmarkme", "RCurl", "Rtsne", "uwot", "circlize", "Polychrome", "openxlsx", "grid", "gridExtra", "tidyverse", "ggplot2", "ggrepel", "wordcloud", "gplots", "vegan", "matrixStats", "Biostrings", "seqinr", "dada2","DECIPHER","survival", "survminer", "SummarizedExperiment", "ComplexHeatmap", "HybridMTest", "ggpubr", "combinat", "data.table", "genefilter", "gg3D", "gtools", "gtable", "fastSave", "Matrix")
bioconductordeps <- c("dada2", "DECIPHER","SummarizedExperiment", "HybridMTest", "Biostrings", "genefilter", "ComplexHeatmap")
non_bioconductordeps <- alldeps[!(alldeps %in% bioconductordeps)]

BiocManager::install(pkgs = alldeps, update = TRUE, ask = FALSE, site_repository = repos, force = force_install)
#devtools::install_github("jokergoo/ComplexHeatmap")
devtools::install_github('barkasn/fastSave')
#Install the rest of JAMS
devtools::install(jamsdir, upgrade = FALSE, repos = repos)

#Make symlinks for JAMS executables
jamsbinpath <- file.path(jamsdir, "libexec")
jamsBWbinpath <- file.path(jamsdir, "BWlibexec")

for (binexec in binexecs){
    sourcepath <- file.path(jamsbinpath, binexec)
    targetpath <- file.path(linkto, binexec)
    if (file.exists(targetpath)){
        cat(paste(targetpath, "already exists\n"))
    } else {
      cat(paste("Linking executable with", "ln", "-s", sourcepath, targetpath, "\n"))
      system(paste("ln", "-s", sourcepath, targetpath))
    }
}

